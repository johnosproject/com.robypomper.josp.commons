/*******************************************************************************
 * The John Operating System Project is the collection of software and configurations
 * to generate IoT EcoSystem, like the John Operating System Platform one.
 * Copyright (C) 2021 Roberto Pompermaier
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 ******************************************************************************/

import com.robypomper.build.java.JavaPublicationUtils
import com.robypomper.build.gradle.GradleBuildInfo

/**
 * Gradle configurations to manage JOSP Commons as java implementations.
 */


// ------------------
// Components configs
// ------------------

sourceSets {
    jospCommons {}
}

configurations {}

dependencies {
    jospCommonsImplementation "com.robypomper.josp:jospAPIs:${project.ext.get("version.deps.jospAPIs")}"
    jospCommonsImplementation "org.apache.logging.log4j:log4j-api:${project.ext.get("version.apache.log4j")}"           // Logger
    jospCommonsImplementation "org.apache.logging.log4j:log4j-core:${project.ext.get("version.apache.log4j")}"
    jospCommonsImplementation "org.yaml:snakeyaml:${project.ext.get("version.snakeyaml")}"                              // YAML
    jospCommonsImplementation "com.github.scribejava:scribejava-core:${project.ext.get("version.scribejava")}"          // HTTP & OAuth2
    jospCommonsImplementation "com.github.scribejava:scribejava-apis:${project.ext.get("version.scribejava")}"
    jospCommonsCompileOnly "org.projectlombok:lombok:${project.ext.get("version.lombok")}"                              // Lombok annotations
    jospCommonsAnnotationProcessor "org.projectlombok:lombok:${project.ext.get("version.lombok")}"
    jospCommonsImplementation "org.jmdns:jmdns:${project.ext.get("version.jmdns")}"                                     // JmDNS

}


GradleBuildInfo.makeBuildInfoForSourceSet(project, sourceSets.jospCommons, (String)project.ext.get("version.build.jospCommons"));


// -------------------
// Publication configs
// -------------------

String jospCommonsName = ext.get('artifactLongName')
String jospCommonsArtifact = ext.get('artifactName')
String jospCommonsVersion = ext.get('artifactVersion')
String jospCommonsDescription = ext.get('artifactDescription')
def jospCommonsPubDesc = new JavaPublicationUtils.Descriptor(project,sourceSets.jospCommons,jospCommonsName,jospCommonsArtifact,jospCommonsVersion,jospCommonsDescription)
        .setUrlsFromProject(project)
        .setLicenceGPLv3()
        .setArtifactOpens()
JavaPublicationUtils.generatePublication(project,jospCommonsPubDesc)
tasks.jospCommonsDocs.enabled = !project.ext.get("disableDocs");


// -----------------
// Publication tasks
// -----------------

task jospCommons_PublishToLocal {
    description = 'Publish JOSP Commons component to local repository...'
    group = 'JOSP publishers (locals)'
    dependsOn publishJospCommonsPublicationToMavenLocal
    tasks.josp_PublishToLocal.dependsOn jospCommons_PublishToLocal
    mustRunAfter jospAPIs_PublishToLocal
}
